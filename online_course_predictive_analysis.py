# -*- coding: utf-8 -*-
"""Online Course Predictive Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1od49vVlMvfruDcdqU60acSuwc4hOKpN8

## Import Package
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

"""## Load Dataset"""

data = pd.read_csv('/content/online_course_engagement_data.csv')

"""## Data Exploration"""

categorical_features = data.select_dtypes(include=['object']).columns
numerical_features = data.select_dtypes(include=['int64', 'float64']).columns

data.head()

data.info()

data[numerical_features].describe()

data[categorical_features].astype('object').describe(include='all')

"""### Proportion Course Completion"""

round(data['CourseCompletion'].value_counts(normalize=True) * 100, 2)

"""### Distribution of Time Spent on Course"""

plt.figure(figsize=(10, 6))
sns.histplot(data['TimeSpentOnCourse'], kde=True)
plt.title('Distribution of Time Spent on Course')
plt.xlabel('Time Spent on Course (hours)')
plt.ylabel('Frequency')
plt.show()

"""### Completion Rate by Course Category"""

plt.figure(figsize=(10, 6))
sns.boxplot(x='CourseCategory', y='CompletionRate', data=data)
plt.title('Completion Rate by Course Category')
plt.xlabel('Course Category')
plt.ylabel('Completion Rate')
plt.show()

"""### Course Completion by Device Type"""

plt.figure(figsize=(10, 6))
sns.countplot(x='DeviceType', hue='CourseCompletion', data=data)
plt.title('Course Completion by Device Type')
plt.xlabel('Device Type (0: Desktop, 1: Mobile)')
plt.ylabel('Count')
plt.show()

"""### Time Spent on Course vs. Completion Rate"""

plt.figure(figsize=(10, 6))
sns.scatterplot(x='TimeSpentOnCourse', y='CompletionRate', hue='CourseCompletion', data=data)
plt.title('Time Spent on Course vs. Completion Rate')
plt.xlabel('Time Spent on Course (hours)')
plt.ylabel('Completion Rate')
plt.show()

"""### Correlation Matrix"""

plt.figure(figsize=(12, 8))
corr_matrix = data[numerical_features].corr()
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', vmin=-1, vmax=1)
plt.title('Correlation Matrix')
plt.show()

"""## Data Preparation"""

data.drop('UserID', axis=1, inplace=True)

"""### Label Encoding"""

encoder = OneHotEncoder(sparse_output=False)
encoded_features = encoder.fit_transform(data[categorical_features])

encoded_data = pd.DataFrame(encoded_features, columns=encoder.get_feature_names_out(categorical_features))

data = data.join(encoded_data)
data = data.drop(categorical_features, axis=1)
data.head()

"""### Data Split"""

X = data.drop(["CourseCompletion"],axis =1)
y = data["CourseCompletion"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)

"""### Standarisasi"""

scaler = StandardScaler()
scaler.fit(X_train)
X_train[X_train.columns] = scaler.transform(X_train)

X_train.head()

X_test[X_test.columns] = scaler.transform(X_test)

X_test.head()

"""## Model Development"""

from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import GradientBoostingClassifier

models = pd.DataFrame(index=['train_accuracy', 'test_accuracy'],
                      columns=['KNN', 'DecisionTree', 'RandomForest', 'Boosting'])

knn = KNeighborsClassifier(n_neighbors=3)
knn.fit(X_train, y_train)

models.loc['train_accuracy','KNN'] = accuracy_score(y_pred = knn.predict(X_train), y_true=y_train)
models.loc['test_accuracy','KNN'] = accuracy_score(y_pred = knn.predict(X_test), y_true=y_test)

dt = DecisionTreeClassifier()
dt.fit(X_train, y_train)
models.loc['train_accuracy','DecisionTree'] = accuracy_score(y_pred = dt.predict(X_train), y_true=y_train)
models.loc['test_accuracy','DecisionTree'] = accuracy_score(y_pred = dt.predict(X_test), y_true=y_test)

rf = RandomForestClassifier(n_estimators = 100)
rf.fit(X_train, y_train)
models.loc['train_accuracy','RandomForest'] = accuracy_score(y_pred = rf.predict(X_train), y_true=y_train)
models.loc['test_accuracy','RandomForest'] = accuracy_score(y_pred = rf.predict(X_test), y_true=y_test)

gb = GradientBoostingClassifier()
gb.fit(X_train, y_train)
models.loc['train_accuracy','Boosting'] = accuracy_score(y_pred = gb.predict(X_train), y_true=y_train)
models.loc['test_accuracy','Boosting'] = accuracy_score(y_pred = gb.predict(X_test), y_true=y_test)

models

importances = gb.feature_importances_

feature_names = X.columns
importance_df = pd.DataFrame({'Feature': feature_names, 'Importance': importances})
importance_df = importance_df.sort_values(by='Importance', ascending=False)

importance_df